# Built by docker-gen  in the nginx-gen container
# https://github.com/jwilder/docker-gen
#
# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  ''      '';
}

gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';

access_log /proc/self/fd/1 vhost;
error_log /proc/self/fd/2;

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

# Sean tuning
client_max_body_size  10m;
proxy_connect_timeout 300;
proxy_send_timeout    300;
proxy_read_timeout    300;
send_timeout          300;
# hide nginx version
server_tokens         off;

server {
	listen 80 default_server;
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	return 503;
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
{{ if eq $host "foo.bar.ch" }}
#


# Default HTTPS server for *.webfact.domain1.ch
server {
        listen 443 ssl;
        server_name *.webfact.domain1.ch;
        ssl_certificate     /etc/nginx/certs/webfact.domain1.ch.net.crt;
        ssl_certificate_key /etc/nginx/certs/webfact.domain1.ch.net.key;
        return 503;
}
# Default HTTPS server for anything else
server {
	listen 443 ssl default_server;
        server_name _; # This is just an invalid value which will never trigger on a real hostname.
        ssl_certificate     /etc/nginx/certs/name1.com.crt;
        ssl_certificate_key /etc/nginx/certs/name1.com.key;
        return 503;
}
{{ end }}
{{ end }}


{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

{{/* Do not populate the following VirtualHosts: */}}

upstream {{ $host }} {
  {{ range $container := $containers }}
	{{ $addrLen := len $container.Addresses }}
	{{/* If only 1 port exposed, use that */}}
	{{ if eq $addrLen 1 }}
		{{ with $address := index $container.Addresses 0 }}
		   # only 1 port exposed {{$container.Name}}
		   server {{ $address.IP }}:{{ $address.Port }};
		{{ end }}
	{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
	{{ else if $container.Env.VIRTUAL_PORT }}
		{{ range $address := .Addresses }}
		   {{ if eq $address.Port $container.Env.VIRTUAL_PORT }}
		   # more than one port, use the matching VIRTUAL_PORT {{$container.Name}}
		   server {{ $address.IP }}:{{ $address.Port }};
		   {{ end }}
		{{ end }}
	{{/* Else default to standard web port 80 */}}
	{{ else }}
		{{ range $address := $container.Addresses }}
			{{ if eq $address.Port "80" }}
			# default to standard 80 {{$container.Name}}
			server {{ $address.IP }}:{{ $address.Port }};
			{{ end }}
		{{ end }}
	{{ end }}
  {{ end }}
}

upstream {{ $host }}-ssl {
  {{ range $container := $containers }}
   {{ with $address := index $container.Addresses 0 }}
       # create https upstream {{$container.Name}}
       server {{ $address.IP }}:443;
       # {{ if $container.Env.NGINX_NO_HTTPS }} {{else}} server {{ $address.IP }}:443; {{end}}
   {{ end }}
  {{ end }}
}


{{/* Get the first cert name defined by containers w/ the same vhost */}}
{{ $certName := (first (groupByKeys $containers "Env.CERT_NAME")) }}

{{/* Get the best matching cert  by name for the vhost. */}}
{{ $vhostCert := (closest (dir "/etc/nginx/certs") (printf "%s.crt" $host))}}

{{/* vhostCert is actually a filename so remove any suffixes since they are added later */}}
{{ $vhostCert := replace $vhostCert ".crt" "" -1 }}
{{ $vhostCert := replace $vhostCert ".key" "" -1 }}

{{/* Use the cert specifid on the container or fallback to the best vhost match */}}
{{ $cert := (coalesce $certName $vhostCert) }}


{{/* Get NGINX_NO_HTTPS defined by containers w/ the same vhost */}}
{{ $nohttps := (first (groupByKeys $containers "Env.NGINX_NO_HTTPS")) }}
# todo: find a way to detect when https work/not, to avoid the manual exclusing list firther down
# - SSL? NGINX_NO_HTTPS={{$nohttps}}
# - would like to say "and nohttps is not set in the following if line, have tried:
# (eq $nohttps "") ($nohttps) (eq $nohttps nil)

{{ if (and (ne $cert "") (exists (printf "/etc/nginx/certs/%s.crt" $cert)) (exists (printf "/etc/nginx/certs/%s.key" $cert))) }}

    # Found ssl cert={{$cert}}
    server {
	server_name {{ $host }};
	# rewrite http to ssl (all traffic arriving at nginx will be encrypted)
        #      however, unencrpyted to backend container

	location / {
        {{ if hasSuffix ".foo.example.ch" $host }}
        {{ $hostPrefix := trimSuffix ".foo.example.ch" $host }}
		rewrite ^(.*) https://{{ $hostPrefix }}.foo.bar.com$1 permanent;
	{{else if (or (eq $host "foo.bar.com") (eq $host "foo.example.ch") (eq $host "foo"))}} 
	        rewrite ^(.*) https://foo.bar.com$1 permanent;
        {{else}}
		proxy_pass http://{{ $host }};
        {{end}}
	}
    }


    server {
	server_name {{ $host }};
	listen 443 ssl;

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;

	ssl_prefer_server_ciphers on;
	ssl_session_timeout 5m;
	ssl_session_cache shared:SSL:50m;

	# INO debug cert={{ (printf "%s" $cert) }};
	{{if eq $host "webfact.example2.ch"}} 
	  # Special case for root of wildcard
	  ssl_certificate     /etc/nginx/certs/example2.ch.crt;
	  ssl_certificate_key /etc/nginx/certs/example2.ch.key;
	{{else if eq $host "webfact.example.ch"}} 
	  ssl_certificate     /etc/nginx/certs/example.ch.crt;
	  ssl_certificate_key /etc/nginx/certs/example.ch.key;
        {{else if eq $host "webfact.foo.example.ch"}}
          ssl_certificate     /etc/nginx/certs/foo.example.ch.crt;
          ssl_certificate_key /etc/nginx/certs/foo.example.ch.key;
        {{else if eq $host "foo.example.ch"}}
	  ssl_certificate     /etc/nginx/certs/example.ch.crt;
	  ssl_certificate_key /etc/nginx/certs/example.ch.key;
	{{else if eq $host "foo.bar.com"}} 
	  ssl_certificate     /etc/nginx/certs/foo-host.bar.com.crt;
	  ssl_certificate_key /etc/nginx/certs/foo-host.bar.com.key;
        {{else}}
	  ssl_certificate     /etc/nginx/certs/{{ (printf "%s.crt" $cert) }};
	  ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.key" $cert) }};
        {{end}}

	# disable STS for now
	#add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";

	location / {
		## INO host=$host 
		{{if eq $host "jenkins.webfact.example2.ch"}}
			# forward https onto http, for hosts that do not have ssl
			# todo: how can this be automated?
			proxy_pass http://{{ $host }};
		{{else if eq $host "jenkins2.webfact.example2.ch"}}
			proxy_pass http://{{ $host }};
		{{else if eq $host "cibuild.webfact.example2.ch"}}
			proxy_pass http://{{ $host }};
		{{else if eq $host "jenkins.webfact.example.ch"}}
			proxy_pass http://{{ $host }};
	        {{else if eq $host "foo.example.ch"}} 
	                rewrite ^(.*) https://foo.bar.com$1 permanent;
	        {{else if hasSuffix ".foo.example.ch" $host}} 
                        {{$hostPrefix := trimSuffix ".foo.example.ch" $host}}
		        rewrite ^(.*) https://{{ $hostPrefix }}.foo.bar.com$1 permanent;
		{{else}}
			# keep https to https
			proxy_pass https://{{ $host }}-ssl;
		{{end}}
	}
    }

    {{ if hasSuffix ".foo.example.ch" $host }}
    {{ $hostPrefix := trimSuffix ".foo.example.ch" $host }}
        server {
            server_name {{ $hostPrefix }}.foo.bar.com;

            location / {
                rewrite ^(.*) https://{{ $hostPrefix }}.foo.bar.com$1 permanent;
            }
        }
        server {
            server_name {{ $hostPrefix }}.foo.bar.com;
            listen 443 ssl;

            ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
            ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;

            ssl_prefer_server_ciphers on;
            ssl_session_timeout 5m;
            ssl_session_cache shared:SSL:50m;

            ssl_certificate     /etc/nginx/certs/foo.bar.com.crt;
            ssl_certificate_key /etc/nginx/certs/foo.bar.com.key;

            location / {
                proxy_pass https://{{ $hostPrefix }}.foo.example.ch-ssl;
            }
        }
    {{ end }}

{{ else }}

    # no cert={{$cert}}
    server {
	server_name {{ $host }};
	location / {
		proxy_pass http://{{ $host }};
	}
    }

    server {
	server_name {{ $host }};
	listen 443 ssl;
	return 503;

	{{ if (and (exists "/etc/nginx/certs/default.crt") (exists "/etc/nginx/certs/default.key")) }}
	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
	{{ end }}
    }

{{ end }}

{{ end }}

{{ end }}

